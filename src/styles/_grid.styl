@import './_variables';
@import './_breakpoints';

makeContainer(gutter = $gridGutterWidth) {
  // padding-right: (gutter / 2);
  // padding-left: (gutter / 2);
  margin-right: auto;
  margin-left: auto;
  width: 100%;
}

makeContainerMaxWidths(breakpoints = $gridBreakpoints) {
  for breakpoint, containerMaxWidth in breakpoints {
    if containerMaxWidth > 0 {
      +mediaBreakpointUp(breakpoint) {
        max-width: containerMaxWidth;
      }
    }
  }
}

makeRow(gutter = $gridGutterWidth) {
  display: flex;
  flex-wrap: wrap;
  // margin-right: (gutter / -2);
  // margin-left: (gutter / -2);
}

makeColReady(gutter = $gridGutterWidth) {
  min-height: 1px;
  // padding-right: (gutter / 2);
  // padding-left: (gutter / 2);
  position: relative;
  width: 100%;
}

makeCol(size, columns = $gridColumns) {
  flex: 0 0 percentage(size / columns);
  max-width: percentage(size / columns);
}

makeColOffset(size, columns = $gridColumns) {
  num = size / columns;
  margin-left: num == 0 ? 0 : percentage(num);
}

makeGridColumns(columns = $gridColumns, gutter = $gridGutterWidth, breakpoints = $gridBreakpoints) {
  .grid-column {
    makeColReady(gutter);
  }

  for breakpoint, _ in breakpoints {
    infix = breakpointInfix(breakpoint, breakpoints);

    for i in range(1, columns) {
      .col{infix}-{i} {
        @extend .grid-column;
      }
    }

    .col{infix},
    .col{infix}-auto {
      @extend .grid-column;
    }

    +mediaBreakpointUp(breakpoint, breakpoints) {
      .col{infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      .col{infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
      }

      for i in range(1, columns) {
        .col{infix}-{i} {
          makeCol(i, columns);
        }
      }

      .order{infix}-first { order: -1; }

      .order{infix}-last { order: columns + 1; }

      for i in range(0, columns) {
        .order{infix}-{i} { order: i; }
      }

      for i in range(0, (columns - 1)) {
        if !(infix == "" && i == 0) {
          .offset{infix}-{i} {
            makeColOffset(i, columns);
          }
        }
      }
    }
  }
}
